/**
 *    Filename: ImportXml.java
 *     Version: 0.9.0
 * Description: Import XML
 *     License: GPLv2
 *        Date: 2017-01-14
 *
 * This is the "driver" for xml import.  It sets up the parser, catches
 * exceptions, and associates our XmlHandler class with the parser so
 * it can listen for events.  You create one of these and pass it an xml
 * file name (with path).  You get the resultant recipe with
 * ImportXml.handler.getRecipe().  I wish I could figure out how
 * to just use ImportXml.getRecipe(), but it doesn't seem to work.
 *
 * Copyright (c) 2007 jimcdiver
 * @author jimcdiver
 *
 * Copyright (c) 2017 Dallas Fletchall
 * @author Dallas Fletchall
 */

/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package com.homebrewware;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class ImportXml  {

	public XmlHandler handler;
	public XmlStyleHandler styleHandler;
	public XmlBeerXmlHandler beerXmlHandler;

	public ImportXml(String fileName, String type) {

		// Use the default (non-validating) parser
		SAXParserFactory factory = SAXParserFactory.newInstance();
		Debug.print("Using Sax Parser factory: " + factory.getClass() + "\n");
		try {

			// Parse the input
			SAXParser saxParser = factory.newSAXParser();
			if (type.equalsIgnoreCase("style")){
				styleHandler = new XmlStyleHandler();
				saxParser.parse(new File(fileName), styleHandler);
			}
			if (type.equalsIgnoreCase("beerXML")){
				beerXmlHandler = new XmlBeerXmlHandler();
				saxParser.parse(new File(fileName), beerXmlHandler);
			}
			else {
				handler = new XmlHandler();
				saxParser.parse(new File(fileName), handler);
			}



		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println("\n** Parsing error" + ", line "
					+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}


	}



}
